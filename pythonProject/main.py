# Создаем класс "Животное"
class Animal:
    # Конструктор класса, инициализирует объекты класса
    def __init__(self, name, age):
        self.name = name  # Имя животного
        self.age = age    # Возраст животного

    # Метод для вывода информации о животном
    def display_info(self):
        print(f"Имя: {self.name}, Возраст: {self.age}")


# Создаем подкласс "Собака", который наследует от класса "Животное"
class Dog(Animal):
    # Конструктор подкласса, дополнительно инициализирует породу собаки
    def __init__(self, name, age, breed):
        # Вызов конструктора родительского класса для инициализации имени и возраста
        super().__init__(name, age)
        self.breed = breed  # Порода собаки

    # Метод для вывода информации о собаке, переопределенный из родительского класса
    def display_info(self):
        print(f"Имя: {self.name}, Возраст: {self.age}, Порода: {self.breed}")


# Создаем экземпляры классов и вызываем их методы
def main():
    # Создаем объекты класса "Animal"
    animal1 = Animal("Кот", 3)
    animal2 = Animal("Попугай", 1)

    # Выводим информацию о животных
    print("Информация о животных:")
    animal1.display_info()
    animal2.display_info()
    print()

    # Создаем объекты класса "Dog"
    dog1 = Dog("Шарик", 2, "Дворняга")
    dog2 = Dog("Бобик", 4, "Овчарка")

    # Выводим информацию о собаках
    print("Информация о собаках:")
    dog1.display_info()
    dog2.display_info()


if __name__ == "__main__":
    main()

#Этот код демонстрирует основные принципы ООП:
#Инкапсуляция: Переменные name, age, и breed являются членами классов Animal и Dog, и они инкапсулированы внутри классов. Методы display_info() являются интерфейсами доступа к этим данным.
#Наследование: Класс Dog наследует от класса Animal, что позволяет собакам использовать все атрибуты и методы класса Animal, а также определять свои собственные атрибуты и методы.
#Полиморфизм: Метод display_info() в классе Dog переопределяет метод с тем же именем в классе Animal, что позволяет объектам Dog предоставлять свою собственную реализацию этого метода.